// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.2
//   protoc               v5.29.3
// source: compose.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';

export const protobufPackage = 'compose';

export interface ComposeRequest {
	imageBase64: string;
	text: string;
	sentences: string[];
}

export interface ComposeResponse {
	composedImage: Uint8Array;
}

function createBaseComposeRequest(): ComposeRequest {
	return { imageBase64: '', text: '', sentences: [] };
}

export const ComposeRequest: MessageFns<ComposeRequest> = {
	encode(
		message: ComposeRequest,
		writer: BinaryWriter = new BinaryWriter()
	): BinaryWriter {
		if (message.imageBase64 !== '') {
			writer.uint32(10).string(message.imageBase64);
		}
		if (message.text !== '') {
			writer.uint32(18).string(message.text);
		}
		for (const v of message.sentences) {
			writer.uint32(26).string(v!);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): ComposeRequest {
		const reader =
			input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseComposeRequest();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1: {
					if (tag !== 10) {
						break;
					}

					message.imageBase64 = reader.string();
					continue;
				}
				case 2: {
					if (tag !== 18) {
						break;
					}

					message.text = reader.string();
					continue;
				}
				case 3: {
					if (tag !== 26) {
						break;
					}

					message.sentences.push(reader.string());
					continue;
				}
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): ComposeRequest {
		return {
			imageBase64: isSet(object.imageBase64)
				? globalThis.String(object.imageBase64)
				: '',
			text: isSet(object.text) ? globalThis.String(object.text) : '',
			sentences: globalThis.Array.isArray(object?.sentences)
				? object.sentences.map((e: any) => globalThis.String(e))
				: [],
		};
	},

	toJSON(message: ComposeRequest): unknown {
		const obj: any = {};
		if (message.imageBase64 !== '') {
			obj.imageBase64 = message.imageBase64;
		}
		if (message.text !== '') {
			obj.text = message.text;
		}
		if (message.sentences?.length) {
			obj.sentences = message.sentences;
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<ComposeRequest>, I>>(
		base?: I
	): ComposeRequest {
		return ComposeRequest.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<ComposeRequest>, I>>(
		object: I
	): ComposeRequest {
		const message = createBaseComposeRequest();
		message.imageBase64 = object.imageBase64 ?? '';
		message.text = object.text ?? '';
		message.sentences = object.sentences?.map((e) => e) || [];
		return message;
	},
};

function createBaseComposeResponse(): ComposeResponse {
	return { composedImage: new Uint8Array(0) };
}

export const ComposeResponse: MessageFns<ComposeResponse> = {
	encode(
		message: ComposeResponse,
		writer: BinaryWriter = new BinaryWriter()
	): BinaryWriter {
		if (message.composedImage.length !== 0) {
			writer.uint32(10).bytes(message.composedImage);
		}
		return writer;
	},

	decode(input: BinaryReader | Uint8Array, length?: number): ComposeResponse {
		const reader =
			input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseComposeResponse();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1: {
					if (tag !== 10) {
						break;
					}

					message.composedImage = reader.bytes();
					continue;
				}
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): ComposeResponse {
		return {
			composedImage: isSet(object.composedImage)
				? bytesFromBase64(object.composedImage)
				: new Uint8Array(0),
		};
	},

	toJSON(message: ComposeResponse): unknown {
		const obj: any = {};
		if (message.composedImage.length !== 0) {
			obj.composedImage = base64FromBytes(message.composedImage);
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<ComposeResponse>, I>>(
		base?: I
	): ComposeResponse {
		return ComposeResponse.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<ComposeResponse>, I>>(
		object: I
	): ComposeResponse {
		const message = createBaseComposeResponse();
		message.composedImage = object.composedImage ?? new Uint8Array(0);
		return message;
	},
};

export interface ComposeService {
	ComposeImage(request: ComposeRequest): Promise<ComposeResponse>;
}

export const ComposeServiceServiceName = 'compose.ComposeService';

export class ComposeServiceClientImpl implements ComposeService {
	private readonly rpc: Rpc;
	private readonly service: string;

	constructor(rpc: Rpc, opts?: { service?: string }) {
		this.service = opts?.service || ComposeServiceServiceName;
		this.rpc = rpc;
		this.ComposeImage = this.ComposeImage.bind(this);
	}

	ComposeImage(request: ComposeRequest): Promise<ComposeResponse> {
		const data = ComposeRequest.encode(request).finish();
		const promise = this.rpc.request(this.service, 'ComposeImage', data);
		return promise.then((data) =>
			ComposeResponse.decode(new BinaryReader(data))
		);
	}
}

interface Rpc {
	request(
		service: string,
		method: string,
		data: Uint8Array
	): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
	if ((globalThis as any).Buffer) {
		return Uint8Array.from(globalThis.Buffer.from(b64, 'base64'));
	} else {
		const bin = globalThis.atob(b64);
		const arr = new Uint8Array(bin.length);
		for (let i = 0; i < bin.length; ++i) {
			arr[i] = bin.charCodeAt(i);
		}
		return arr;
	}
}

function base64FromBytes(arr: Uint8Array): string {
	if ((globalThis as any).Buffer) {
		return globalThis.Buffer.from(arr).toString('base64');
	} else {
		const bin: string[] = [];
		arr.forEach((byte) => {
			bin.push(globalThis.String.fromCharCode(byte));
		});
		return globalThis.btoa(bin.join(''));
	}
}

type Builtin =
	| Date
	| Function
	| Uint8Array
	| string
	| number
	| boolean
	| undefined;

export type DeepPartial<T> = T extends Builtin
	? T
	: T extends globalThis.Array<infer U>
		? globalThis.Array<DeepPartial<U>>
		: T extends ReadonlyArray<infer U>
			? ReadonlyArray<DeepPartial<U>>
			: T extends {}
				? { [K in keyof T]?: DeepPartial<T[K]> }
				: Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
	? P
	: P & { [K in keyof P]: Exact<P[K], I[K]> } & {
			[K in Exclude<keyof I, KeysOfUnion<P>>]: never;
		};

function isSet(value: any): boolean {
	return value !== null && value !== undefined;
}

export interface MessageFns<T> {
	encode(message: T, writer?: BinaryWriter): BinaryWriter;

	decode(input: BinaryReader | Uint8Array, length?: number): T;

	fromJSON(object: any): T;

	toJSON(message: T): unknown;

	create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;

	fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
