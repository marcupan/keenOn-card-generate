// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.2
//   protoc               v5.29.3
// source: proto/translation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire';

export const protobufPackage = 'translation';

export interface TranslationRequest {
	chineseWord: string;
}

export interface TranslationResponse {
	translation: string;
	individualTranslations: string[];
	exampleSentences: string[];
}

function createBaseTranslationRequest(): TranslationRequest {
	return { chineseWord: '' };
}

export const TranslationRequest: MessageFns<TranslationRequest> = {
	encode(
		message: TranslationRequest,
		writer: BinaryWriter = new BinaryWriter()
	): BinaryWriter {
		if (message.chineseWord !== '') {
			writer.uint32(10).string(message.chineseWord);
		}
		return writer;
	},

	decode(
		input: BinaryReader | Uint8Array,
		length?: number
	): TranslationRequest {
		const reader =
			input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseTranslationRequest();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1: {
					if (tag !== 10) {
						break;
					}

					message.chineseWord = reader.string();
					continue;
				}
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): TranslationRequest {
		return {
			chineseWord: isSet(object.chineseWord)
				? globalThis.String(object.chineseWord)
				: '',
		};
	},

	toJSON(message: TranslationRequest): unknown {
		const obj: any = {};
		if (message.chineseWord !== '') {
			obj.chineseWord = message.chineseWord;
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<TranslationRequest>, I>>(
		base?: I
	): TranslationRequest {
		return TranslationRequest.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<TranslationRequest>, I>>(
		object: I
	): TranslationRequest {
		const message = createBaseTranslationRequest();
		message.chineseWord = object.chineseWord ?? '';
		return message;
	},
};

function createBaseTranslationResponse(): TranslationResponse {
	return {
		translation: '',
		individualTranslations: [],
		exampleSentences: [],
	};
}

export const TranslationResponse: MessageFns<TranslationResponse> = {
	encode(
		message: TranslationResponse,
		writer: BinaryWriter = new BinaryWriter()
	): BinaryWriter {
		if (message.translation !== '') {
			writer.uint32(10).string(message.translation);
		}
		for (const v of message.individualTranslations) {
			writer.uint32(18).string(v!);
		}
		for (const v of message.exampleSentences) {
			writer.uint32(26).string(v!);
		}
		return writer;
	},

	decode(
		input: BinaryReader | Uint8Array,
		length?: number
	): TranslationResponse {
		const reader =
			input instanceof BinaryReader ? input : new BinaryReader(input);
		let end = length === undefined ? reader.len : reader.pos + length;
		const message = createBaseTranslationResponse();
		while (reader.pos < end) {
			const tag = reader.uint32();
			switch (tag >>> 3) {
				case 1: {
					if (tag !== 10) {
						break;
					}

					message.translation = reader.string();
					continue;
				}
				case 2: {
					if (tag !== 18) {
						break;
					}

					message.individualTranslations.push(reader.string());
					continue;
				}
				case 3: {
					if (tag !== 26) {
						break;
					}

					message.exampleSentences.push(reader.string());
					continue;
				}
			}
			if ((tag & 7) === 4 || tag === 0) {
				break;
			}
			reader.skip(tag & 7);
		}
		return message;
	},

	fromJSON(object: any): TranslationResponse {
		return {
			translation: isSet(object.translation)
				? globalThis.String(object.translation)
				: '',
			individualTranslations: globalThis.Array.isArray(
				object?.individualTranslations
			)
				? object.individualTranslations.map((e: any) =>
						globalThis.String(e)
					)
				: [],
			exampleSentences: globalThis.Array.isArray(object?.exampleSentences)
				? object.exampleSentences.map((e: any) => globalThis.String(e))
				: [],
		};
	},

	toJSON(message: TranslationResponse): unknown {
		const obj: any = {};
		if (message.translation !== '') {
			obj.translation = message.translation;
		}
		if (message.individualTranslations?.length) {
			obj.individualTranslations = message.individualTranslations;
		}
		if (message.exampleSentences?.length) {
			obj.exampleSentences = message.exampleSentences;
		}
		return obj;
	},

	create<I extends Exact<DeepPartial<TranslationResponse>, I>>(
		base?: I
	): TranslationResponse {
		return TranslationResponse.fromPartial(base ?? ({} as any));
	},
	fromPartial<I extends Exact<DeepPartial<TranslationResponse>, I>>(
		object: I
	): TranslationResponse {
		const message = createBaseTranslationResponse();
		message.translation = object.translation ?? '';
		message.individualTranslations =
			object.individualTranslations?.map((e) => e) || [];
		message.exampleSentences = object.exampleSentences?.map((e) => e) || [];
		return message;
	},
};

export interface TranslationService {
	Translate(request: TranslationRequest): Promise<TranslationResponse>;
}

export const TranslationServiceServiceName = 'translation.TranslationService';

export class TranslationServiceClientImpl implements TranslationService {
	private readonly rpc: Rpc;
	private readonly service: string;

	constructor(rpc: Rpc, opts?: { service?: string }) {
		this.service = opts?.service || TranslationServiceServiceName;
		this.rpc = rpc;
		this.Translate = this.Translate.bind(this);
	}

	Translate(request: TranslationRequest): Promise<TranslationResponse> {
		const data = TranslationRequest.encode(request).finish();
		const promise = this.rpc.request(this.service, 'Translate', data);
		return promise.then((data) =>
			TranslationResponse.decode(new BinaryReader(data))
		);
	}
}

interface Rpc {
	request(
		service: string,
		method: string,
		data: Uint8Array
	): Promise<Uint8Array>;
}

type Builtin =
	| Date
	| Function
	| Uint8Array
	| string
	| number
	| boolean
	| undefined;

export type DeepPartial<T> = T extends Builtin
	? T
	: T extends globalThis.Array<infer U>
		? globalThis.Array<DeepPartial<U>>
		: T extends ReadonlyArray<infer U>
			? ReadonlyArray<DeepPartial<U>>
			: T extends {}
				? { [K in keyof T]?: DeepPartial<T[K]> }
				: Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
	? P
	: P & { [K in keyof P]: Exact<P[K], I[K]> } & {
			[K in Exclude<keyof I, KeysOfUnion<P>>]: never;
		};

function isSet(value: any): boolean {
	return value !== null && value !== undefined;
}

export interface MessageFns<T> {
	encode(message: T, writer?: BinaryWriter): BinaryWriter;

	decode(input: BinaryReader | Uint8Array, length?: number): T;

	fromJSON(object: any): T;

	toJSON(message: T): unknown;

	create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;

	fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
